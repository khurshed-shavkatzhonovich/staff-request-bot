import logging
from aiogram import F, Router, Dispatcher
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from staffapp.models import StaffRequest
from django.utils import timezone


logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
bot = None
APPROVER_ID = None
ALLOWED_ID = None

def setup(bot_instance, approver_id, allowed_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global bot, APPROVER_ID, ALLOWED_ID
    bot = bot_instance
    APPROVER_ID = approver_id
    ALLOWED_ID = allowed_id

@sync_to_async
def get_request(request_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    return StaffRequest.objects.get(id=request_id)

@sync_to_async
def save_request(request):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    request.save()

async def update_request_buttons(request, message_text, message_reply_markup):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    buttons = []
    
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if request.status != 'approved':
        buttons.append(
            InlineKeyboardButton(
                text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"approve:{request.id}"
            )
        )
    
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if request.status != 'allowed':
        buttons.append(
            InlineKeyboardButton(
                text="üîì –†–∞–∑—Ä–µ—à–∏—Ç—å",
                callback_data=f"allow:{request.id}"
            )
        )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if buttons:
        new_markup = InlineKeyboardMarkup(inline_keyboard=[buttons])
    else:
        new_markup = None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_text(
        chat_id=message_reply_markup.chat.id,
        message_id=message_reply_markup.message_id,
        text=message_text,
        reply_markup=new_markup
    )

@router.callback_query(F.data.startswith("approve:"))
async def handle_approve(callback: CallbackQuery):
    try:
        request_id = int(callback.data.split(":")[1])
        user = callback.from_user
        username = user.username or user.full_name
        
        if user.id not in APPROVER_ID:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!", show_alert=True)
            return

        request = await get_request(request_id)
        request.status = 'approved'
        request.approved_by = username
        request.approved_at = timezone.now()
        await save_request(request)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±–æ–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        base_text = callback.message.text.split('\n\n')[0]
        new_text = base_text
        
        # –ï—Å–ª–∏ –±—ã–ª–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        if request.authorized_by:
            new_text += f"\n\nüîì –†–∞–∑—Ä–µ—à–µ–Ω–æ: {request.authorized_by}\n‚è± {request.authorized_at.strftime('%d.%m.%Y %H:%M')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        new_text += f"\n\n‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {username}\n‚è± {request.approved_at.strftime('%d.%m.%Y %H:%M')}"
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await callback.message.edit_text(
            text=new_text,
            reply_markup=None
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_approve: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("allow:"))
async def handle_allow(callback: CallbackQuery):
    try:
        request_id = int(callback.data.split(":")[1])
        user = callback.from_user
        username = user.username or user.full_name
        
        if user.id not in ALLOWED_ID:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!", show_alert=True)
            return

        request = await get_request(request_id)
        request.status = 'allowed'
        request.authorized_by = username
        request.authorized_at = timezone.now()
        await save_request(request)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        new_text = f"{callback.message.text.split('\n\n')[0]}\n\nüîì –†–∞–∑—Ä–µ—à–µ–Ω–æ: {username}\n‚è± {request.authorized_at.strftime('%d.%m.%Y %H:%M')}"
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        buttons = [[
            InlineKeyboardButton(
                text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"approve:{request.id}"
            )
        ]]
        
        await callback.message.edit_text(
            text=new_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_allow: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def register_callbacks(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    dp.include_router(router)