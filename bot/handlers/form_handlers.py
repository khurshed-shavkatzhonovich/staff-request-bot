# bot/handlers/form_handlers.py
from django.utils import timezone
from aiogram import F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from staffapp.models import StaffRequest
from decimal import Decimal
import logging
from bot.handlers.states import Form
from asgiref.sync import sync_to_async


logger = logging.getLogger(__name__)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
bot_instance = None
dp_instance = None
TARGET_CHAT_ID = None

def setup(bot, dp, target_chat_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    global bot_instance, dp_instance, TARGET_CHAT_ID
    bot_instance = bot
    dp_instance = dp
    TARGET_CHAT_ID = target_chat_id

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")]],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
        resize_keyboard=True
    )

def get_request_type_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîß –†–µ–º–æ–Ω—Ç"), KeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∞")],
            [KeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞—è–≤–æ–∫!",
            reply_markup=get_main_kb()
        )
        logger.info(f"User {message.from_user.id} started bot")
    except Exception as e:
        logger.error(f"Error in start_handler: {e}")

async def new_request_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
            reply_markup=get_request_type_kb()
        )
        await state.set_state(Form.request_type)
        logger.info(f"User {message.from_user.id} started new request")
    except Exception as e:
        logger.error(f"Error in new_request_handler: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏", reply_markup=get_main_kb())

async def process_request_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
            await state.clear()
            return
        
        type_mapping = {
            "üîß –†–µ–º–æ–Ω—Ç": "repair",
            "üõí –ü–æ–∫—É–ø–∫–∞": "purchase",
            "üí∏ –†–∞—Å—Ö–æ–¥": "expense"
        }
        
        if message.text not in type_mapping:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return
        
        await state.update_data(request_type=type_mapping[message.text])
        await state.set_state(Form.site)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ (–æ–±—ä–µ–∫—Ç):", reply_markup=get_cancel_kb())
        logger.info(f"User {message.from_user.id} selected request type: {message.text}")
    except Exception as e:
        logger.error(f"Error in process_request_type: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏", reply_markup=get_main_kb())
        await state.clear()

async def process_site(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–∫–∞"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
            await state.clear()
            return
            
        await state.update_data(site=message.text)
        data = await state.get_data()
        
        if data["request_type"] == "repair":
            await state.set_state(Form.equipment)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=get_cancel_kb())
        else:
            await state.set_state(Form.description)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=get_cancel_kb())
        
        logger.info(f"User {message.from_user.id} entered site: {message.text}")
    except Exception as e:
        logger.error(f"Error in process_site: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —É—á–∞—Å—Ç–∫–∞", reply_markup=get_main_kb())
        await state.clear()

async def process_equipment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
            await state.clear()
            return
            
        await state.update_data(equipment=message.text)
        await state.set_state(Form.description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=get_cancel_kb())
        logger.info(f"User {message.from_user.id} entered equipment: {message.text}")
    except Exception as e:
        logger.error(f"Error in process_equipment: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", reply_markup=get_main_kb())
        await state.clear()

async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
            await state.clear()
            return
            
        await state.update_data(description=message.text)
        await state.set_state(Form.currency)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=get_currency_kb())
        logger.info(f"User {message.from_user.id} entered description: {message.text}")
    except Exception as e:
        logger.error(f"Error in process_description: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è", reply_markup=get_main_kb())
        await state.clear()

async def process_currency(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
            await state.clear()
            return

        currency_map = {
            "üáπüáØ –°–æ–º–æ–Ω–∏": "TJS",
            "üá∑üá∫ –†—É–±–ª—å": "RUB",
            "üá∫üá∏ –î–æ–ª–ª–∞—Ä": "USD"
        }

        if message.text not in currency_map:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
            return

        await state.update_data(currency=currency_map[message.text])
        await state.set_state(Form.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=get_cancel_kb())

    except Exception as e:
        logger.error(f"Error in process_currency: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã", reply_markup=get_main_kb())
        await state.clear()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
@sync_to_async
def create_staff_request(user_id, username, full_name, request_type, site, equipment, description, amount, currency):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        return StaffRequest.objects.create(
            telegram_user_id=user_id,
            telegram_username=username,
            full_name=full_name,
            request_type=request_type,
            site=site,
            equipment=equipment,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            currency=currency,
            description=description,
            amount=amount,
            status="pending",
            subdivision="-",  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            created_at=timezone.now()  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        )
    except Exception as e:
        logger.error(f"Error in create_staff_request: {e}")
        raise

@sync_to_async
def save_request_with_message_id(request, message_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å message_id"""
    if not request or not hasattr(request, 'save'):
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏")
    request.telegram_message_id = message_id
    request.save(update_fields=['telegram_message_id'])

@sync_to_async
def save_request_with_message_id(request, message_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å message_id"""
    request.telegram_message_id = message_id
    request.save()

def get_currency_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üáπüáØ –°–æ–º–æ–Ω–∏"), KeyboardButton(text="üá∑üá∫ –†—É–±–ª—å"), KeyboardButton(text="üá∫üá∏ –î–æ–ª–ª–∞—Ä")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É"
    )


async def process_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
            await state.clear()
            return
            
        try:
            amount = Decimal(str(message.text.replace(",", ".")))
        except Exception:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
            return
        
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        request = await create_staff_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            request_type=data["request_type"],
            site=data["site"],
            equipment=data.get("equipment", None),  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º None –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            description=data["description"],
            currency=data.get("currency", "TJS"),
            amount=amount
        )
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–º–µ–µ—Ç ID
        if not request or not request.id:
            raise ValueError("–ó–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç ID")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = await state.get_data()
        currency = data.get("currency", "TJS")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–º–æ–Ω–∏
        msg = (
            f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request.id}</b>\n"
            f"–¢–∏–ø: {request.get_request_type_display()}\n"
            f"–£—á–∞—Å—Ç–æ–∫: {request.site}\n"
        )
        if request.equipment:
            msg += f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {request.equipment}\n"
        msg += (
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n"
            f"–°—É–º–º–∞: {request.amount} {currency}\n"
            f"–û—Ç: @{message.from_user.username or message.from_user.full_name}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —è–≤–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É
        buttons = [
            [InlineKeyboardButton(
                text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data=f"approve:{request.pk}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º pk –≤–º–µ—Å—Ç–æ id
            )],
            [InlineKeyboardButton(
                text="üîì –†–∞–∑—Ä–µ—à–∏—Ç—å", 
                callback_data=f"allow:{request.pk}"
            )]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        sent_message = await bot_instance.send_message(
            chat_id=TARGET_CHAT_ID,
            text=msg,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_request_with_message_id(request, sent_message.message_id)

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_main_kb())
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏", reply_markup=get_main_kb())
        await state.clear()

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.message.register(start_handler, CommandStart())
    dp.message.register(new_request_handler, F.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    dp.message.register(process_request_type, Form.request_type)
    dp.message.register(process_site, Form.site)
    dp.message.register(process_equipment, Form.equipment)
    dp.message.register(process_description, Form.description)
    dp.message.register(process_currency, Form.currency)
    dp.message.register(process_amount, Form.amount)
